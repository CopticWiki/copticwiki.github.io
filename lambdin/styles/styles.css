h3 {
	position: sticky;
	top: 0em;
	padding-block: 1em;
}

#toc_outline,
#table_of_contents,
#toc,
#abbreviations_and_conventions,
#introduction
/*.subsection.exercises*/
 {
	display: none;
}

#introduction #alphabet {
	font-size: clamp(.4rem, -0.125rem + 5vw, 3rem);
	max-height: 9em;
	display: flex;
	flex-direction: column;
	flex-wrap: wrap;
	gap: 0em 1em;
	padding: 0;
	justify-content: space-between;
	align-content: center;
}

/*
alphabet sizing
convertForClamp(840, 360, 2.5, 1);
function convertForClamp(vOldMax, vOldMin, fMax, fMin) {
	let vNewMax = vOldMax / 16;
	let vNewMin = vOldMin / 16;
	let slope = ((fMax - fMin) / (vNewMax - vNewMin));
	let yAxisIntersection = -vNewMin * slope + fMin;
	let preferredValue = slope * 100;
	console.log("Slope:" + slope + "\nY AxisIntersection: " + yAxisIntersection + "\n\nclamp(" + fMin + "rem, " + yAxisIntersection + "rem + " + preferredValue + "vw, " + fMax + "rem)");
}
*/


.subsection .vocabulary {
	list-style-type: none;
	line-height: 2;
}

.subsection .vocabulary .coptic {
	color: maroon;
}

.subsection.exercises ol {
	vertical-align: top;
}

.subsection.exercises > ol.list-abc-upper {
	list-style-type: upper-alpha;
	
}

.subsection.exercises > ol > li {
	//display: inline-block;
}

.subsection.exercises table {
	border-collapse: collapse;
}

.subsection.exercises td {
	//border: 1px solid;
	padding: .5rem;
}

.subsection.exercises td[colspan="2"] {
	text-align: center;
}

.subsection.exercises td input {
	margin: 0;
	margin: .5rem;
}

.subsection.exercises td:has(input) {
	vertical-align: top;
	//padding: 0;
}

.subsection.exercises td .coptic {
	//padding: .5rem;
}

.subsection.exercises td:has(> .coptic) {
	width: 100%;
}





.exercises.has-subsection {
	//padding-left: 0;
	//list-style-position: inside;
}

.exercises.has-subsection > li {
	//list-style-type: upper-alpha;
}

.exercises li.subsection ol > li > ul {
	//display: inline-grid;
}

.exercises li.subsection ol ul {
	//list-style-type: none;
}

tr:has(> td > input[type="checkbox"]) + tr td,
li:has(> input[type="checkbox"]) + li {
	opacity: 0;
	transition: opacity .5s ease;
}

tr:has(> td > input[type="checkbox"]:checked) + tr td,
li:has(> input[type="checkbox"]:checked) + li {
	opacity: 1;
}